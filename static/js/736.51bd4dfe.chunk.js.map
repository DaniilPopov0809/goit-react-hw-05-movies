{"version":3,"file":"static/js/736.51bd4dfe.chunk.js","mappings":"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","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","components/Reviews/Reviews.styled.jsx","utils/API.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  padding: 10px 0;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 20px;\n  color: var(--secondary-text-color);\n\n  border-bottom: 1px solid var(--link-color);\n`;\n\nexport const Item = styled.li`\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: column;\n  text-align: center;\n\n  box-shadow: var(--shadow);\n\n  border: 1px solid var(--link-color);\n  border-radius: 10px;\n  overflow: hidden;\n\n  @media screen and (max-width: 767px) {\n    flex-basis: calc((100% - 20px) / 2);\n  }\n\n  @media screen and (min-width: 768px) {\n    flex-basis: calc((100% - 40px) / 3);\n  }\n  @media screen and (min-width: 1280px) {\n    flex-basis: calc((100% - 80px) / 5);\n  }\n`;\n\nexport const Image = styled.img`\n  margin-bottom: 10px;\n`;\n\nexport const Wrapper = styled.div`\npadding: 10px;\n`;\n\n\nexport const Character = styled.p``;\n\nexport const Name = styled.p`\n  font-weight: 500;\n  color: var(--link-color);\n  margin-bottom: 10px;\n`;\n","import { toast } from 'react-toastify';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getCreditsFilmAPI } from 'utils/API';\nimport { LoaderWrapper } from '../Layout/Layout.styled';\nimport notFoundImg from '../../image/not_found_img.png';\nimport Loader from 'components/Loader/Loader';\nimport { List, Item, Image, Name, Character, Wrapper } from './Cast.styled';\nimport { Message } from 'components/Reviews/Reviews.styled';\n\nconst IMGPATH = 'https://image.tmdb.org/t/p/original';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n\n  const [cast, setCast] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    const getCast = async () => {\n      setIsLoading(true);\n      try {\n        const data = await getCreditsFilmAPI(movieId);\n        setCast(data.cast);\n      } catch {\n        toast.error('Oops, something went wrong!');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    getCast();\n  }, [movieId]);\n\n  return (\n    <>\n      {isLoading && (\n        <LoaderWrapper>\n          <Loader />\n        </LoaderWrapper>\n      )}\n      {!isLoading && cast.length === 0 ? (\n        <Message>We don't characters for this movie...</Message>\n      ) : (\n        <List>\n          {cast.map(({ name, profile_path, character, id }) => {\n            return (\n              <Item key={id}>\n                <Image\n                  src={\n                    profile_path\n                      ? `${IMGPATH}${profile_path}`\n                      : `${notFoundImg}`\n                  }\n                  alt={character}\n                />\n                <Wrapper>\n                <Name>{name}</Name>\n                <Character>\n                  Character:\n                  {character}\n                </Character>\n                </Wrapper>\n              </Item>\n            );\n          })}\n        </List>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  border-bottom: 1px solid var(--link-color);\n  padding: 10px 0;\n`;\n\nexport const Item = styled.li`\n  display: flex;\n  padding: 10px;\n\n  box-shadow: var(--shadow);\n\n  border: 1px solid var(--link-color);\n  border-radius: 10px;\n  overflow: hidden;\n\n  &:not(:last-child) {\n    margin-bottom: 10px;\n  }\n`;\n\nexport const Description = styled.p`\n  color: var(--secondary-text-color);\n`;\n\nexport const Title = styled.h3`\n  color: var(--link-color);\n  margin-bottom: 5px;\n`;\n\nexport const Image = styled.img`\n  max-width: 80px;\n  max-height: 80px;\n  border: none;\n  border-radius: 50%;\n  margin-right: 10px;\n`;\n\nexport const ItemWrap = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const Date = styled.p`\n  margin-bottom: 10px;\n  font-size: 14px;\n  font-weight: 500;\n`;\n\nexport const Message = styled.p`\n  text-align: center;\n  border-bottom: 1px solid var(--link-color);\n  padding: 10px 0;\n  font-weight: 500;\n`;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst PARAMS = {\n  params: {\n    api_key: '5928663a35cf4a3fefab8899a0242484',\n  },\n};\n\nasync function getTrendingFilmAPI(param) {\n  const response = await axios.get(\n    `${BASE_URL}trending/movie/${param}`,\n    PARAMS\n  );\n  const data = response.data;\n  return data;\n}\n\nasync function getFilmDetailsAPI(movieId) {\n  const response = await axios.get(`${BASE_URL}movie/${movieId}`, PARAMS);\n  const data = response.data;\n  return data;\n}\n\nasync function getCreditsFilmAPI(movieId) {\n  const response = await axios.get(\n    `${BASE_URL}movie/${movieId}/credits`,\n    PARAMS\n  );\n  const data = response.data;\n  return data;\n}\n\nasync function getReviewsFilmAPI(movieId) {\n  const response = await axios.get(\n    `${BASE_URL}movie/${movieId}/reviews`,\n    PARAMS\n  );\n  const data = response.data;\n  return data;\n}\n\nasync function getSearchFilmAPI(searchMovie) {\n  const KEY = '5928663a35cf4a3fefab8899a0242484';\n  const response = await axios.get(\n    `${BASE_URL}search/movie?api_key=${KEY}&language=en-US&query=${searchMovie}&page=1&include_adult=false`\n  );\n  const data = response.data;\n  return data;\n}\n\nexport {\n  getTrendingFilmAPI,\n  getCreditsFilmAPI,\n  getFilmDetailsAPI,\n  getReviewsFilmAPI,\n  getSearchFilmAPI,\n};\n"],"names":["List","styled","Item","Image","Wrapper","Character","Name","movieId","useParams","useState","cast","setCast","isLoading","setIsLoading","useEffect","getCast","getCreditsFilmAPI","data","toast","Loader","length","map","name","profile_path","character","id","src","notFoundImg","alt","Description","Title","ItemWrap","Date","Message","BASE_URL","PARAMS","params","api_key","getTrendingFilmAPI","param","axios","response","getFilmDetailsAPI","getReviewsFilmAPI","getSearchFilmAPI","searchMovie"],"sourceRoot":""}