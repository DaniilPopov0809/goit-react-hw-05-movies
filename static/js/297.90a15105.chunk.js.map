{"version":3,"file":"static/js/297.90a15105.chunk.js","mappings":"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","sources":["components/MoviesList/MoviesList.styled.jsx","components/Reviews/Reviews.styled.jsx","components/Searchbar/Searchbar.styled.jsx","components/Searchbar/Searchbar.jsx","pages/Movies/Movies.jsx","utils/API.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  row-gap: 10px;\n  column-gap: 20px;\n  padding: 15px 0;\n  border-bottom: 1px solid var(--link-color);\n`;\n\nexport const Item = styled.li`\n  @media screen and (min-width: 768px) {\n    flex-basis: calc((100% - 20px) / 2);\n  }\n  @media screen and (min-width: 1280px) {\n    flex-basis: calc((100% - 60px) / 4);\n  }\n`;\n\nexport const ItemLink = styled(Link)`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  color: var(--secondary-text-color);\n  transition: color 400ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:focus,\n  &:hover {\n    color: var(--accent-color);\n  }\n`;\n\nexport const Description = styled.p`\n  font-weight: 500;\n  font-size: 20px;\n  padding: 12px 0;\n`;\n\nexport const Image = styled.img`\n  scale: 1;\n  transition: scale 400ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:focus,\n  &:hover {\n    scale: 1.05;\n  }\n`;\n","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  border-bottom: 1px solid var(--link-color);\n`;\n\nexport const Item = styled.li`\n  display: flex;\n  padding: 10px 0;\n`;\n\nexport const Description = styled.p`\n  color: var(--secondary-text-color);\n`;\n\nexport const Title = styled.h3`\n  color: var(--link-color);\n  margin-bottom: 5px;\n`;\n\nexport const Image = styled.img`\n  max-width: 80px;\n  max-height: 80px;\n  border: none;\n  border-radius: 50%;\n  margin-right: 10px;\n`;\n\nexport const ItemWrap = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const Date = styled.p`\n  margin-bottom: 10px;\n  font-size: 14px;\n  font-weight: 500;\n`;\n\nexport const Message = styled.p`\n  text-align: center;\n  border-bottom: 1px solid var(--link-color);\n  padding: 10px 0;\n  font-weight: 500;\n`;\n","import styled from '@emotion/styled';\nimport { BsSearch } from 'react-icons/bs';\n\nexport const Form = styled.form`\n  padding: 20px 0;\n  display: flex;\n  justify-content: center;\n  border-bottom: 1px solid var(--link-color);\n`;\n\nexport const Input = styled.input`\n  width: 300px;\n  height: 30px;\n  padding-left: 12px;\n  border-radius: 10px;\n  border: none;\n  font-size: 16px;\n  outline: var(--secondary-text-color) solid 2px;\n`;\n\nexport const Button = styled.button`\n  position: absolute;\n  top: 5px;\n  right: 5px;\n  border: none;\n  background-color: transparent;\n  padding: 0;\n  cursor: pointer;\n  outline: none;\n  color: var(--link-color);\n`;\n\nexport const FormWrap = styled.div`\n  position: relative;\n`;\n\nexport const Lupa = styled(BsSearch)`\n  &:hover,\n  &:focus {\n    color: var(--accent-color);\n  }\n`;\n","import { useEffect } from 'react';\nimport { toast } from 'react-toastify';\nimport { useSearchParams } from 'react-router-dom';\nimport { Form, Input, Button, FormWrap, Lupa } from './Searchbar.styled';\nimport PropTypes from 'prop-types';\n\nconst Searchbar = ({ onSubmit }) => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const searchQuery = searchParams.get('query');\n\n  const handleSumbitForm = event => {\n    event.preventDefault();\n    const query = event.target.inputSearch.value;\n\n    if (query.trim() === '') {\n      toast.info('Enter search image or photo!');\n      return;\n    }\n    setSearchParams(query ? { query } : {});\n    onSubmit(query);\n  };\n\n  useEffect(() => {\n    if (searchQuery) {\n      onSubmit(searchQuery);\n    }\n  });\n\n  return (\n    <>\n      <Form onSubmit={handleSumbitForm}>\n        <FormWrap>\n          <Input\n            type=\"text\"\n            name=\"inputSearch\"\n            placeholder=\"Enter the movie\"\n            defaultValue={searchQuery}\n            autoFocus\n          />\n          <Button type=\"submit\">\n            <Lupa style={{ width: 20, height: 20 }} />\n          </Button>\n        </FormWrap>\n      </Form>\n    </>\n  );\n};\n\nexport default Searchbar;\n\nSearchbar.propTypes = {\n  onSubmit: PropTypes.func,\n};\n","import { toast } from 'react-toastify';\nimport { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { getSearchFilmAPI } from 'utils/API';\nimport Loader from 'components/Loader/Loader';\nimport Searchbar from 'components/Searchbar/Searchbar';\nimport { Message } from 'components/Reviews/Reviews.styled';\nimport { LoaderWrapper } from '../../components/Layout/Layout.styled';\nimport {\n  List,\n  Description,\n  Image,\n  Item,\n  ItemLink,\n} from '../../components/MoviesList/MoviesList.styled';\nimport notFoundPoster from '../../image/not_found_poster.png';\n\nconst IMGPATH = 'https://image.tmdb.org/t/p/original/';\n\nconst Movies = () => {\n  const [searchMovie, setSearchMovie] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [foundMovies, setFoundMovies] = useState([]);\n\n  const location = useLocation();\n\n  const onSubmit = searchValue => {\n    setSearchMovie(searchValue);\n  };\n\n  useEffect(() => {\n    const getSearchFilm = async () => {\n      setIsLoading(true);\n      try {\n        const data = await getSearchFilmAPI(searchMovie);\n        setFoundMovies(data.results);\n      } catch {\n        toast.error('Oops, something went wrong!');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    if (searchMovie) {\n      getSearchFilm();\n    }\n  }, [searchMovie]);\n\n  return (\n    <>\n      <Searchbar onSubmit={onSubmit} />\n      {isLoading && (\n        <LoaderWrapper>\n          <Loader />\n        </LoaderWrapper>\n      )}\n      {foundMovies.length !== 0 && searchMovie && (\n        <List>\n          {foundMovies.map(({ title, poster_path, id }) => {\n            return (\n              <Item key={id}>\n                <ItemLink state={{ from: location }} to={`/movies/${id}`}>\n                  {\n                    <Image\n                      src={\n                        poster_path\n                          ? `${IMGPATH}${poster_path}`\n                          : `${notFoundPoster}`\n                      }\n                      alt={title}\n                    />\n                  }\n                  <Description>{title}</Description>\n                </ItemLink>\n              </Item>\n            );\n          })}\n        </List>\n      )}\n      {foundMovies.length === 0 && searchMovie && !isLoading && (\n        <Message>Nothing found according to your request!</Message>\n      )}\n    </>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst PARAMS = {\n  params: {\n    api_key: '5928663a35cf4a3fefab8899a0242484',\n  },\n};\n\nasync function getTrendingFilmAPI() {\n  const response = await axios.get(`${BASE_URL}trending/movie/day`, PARAMS);\n  const data = response.data;\n  return data;\n}\n\nasync function getFilmDetailsAPI(movieId) {\n  const response = await axios.get(`${BASE_URL}movie/${movieId}`, PARAMS);\n  const data = response.data;\n  return data;\n}\n\nasync function getCreditsFilmAPI(movieId) {\n  const response = await axios.get(\n    `${BASE_URL}movie/${movieId}/credits`,\n    PARAMS\n  );\n  const data = response.data;\n  return data;\n}\n\nasync function getReviewsFilmAPI(movieId) {\n  const response = await axios.get(\n    `${BASE_URL}movie/${movieId}/reviews`,\n    PARAMS\n  );\n  const data = response.data;\n  return data;\n}\n\nasync function getSearchFilmAPI(searchMovie) {\n  const KEY = '5928663a35cf4a3fefab8899a0242484';\n  const response = await axios.get(\n    `${BASE_URL}search/movie?api_key=${KEY}&language=en-US&query=${searchMovie}&page=1&include_adult=false`\n  );\n  const data = response.data;\n  return data;\n}\n\nexport {\n  getTrendingFilmAPI,\n  getCreditsFilmAPI,\n  getFilmDetailsAPI,\n  getReviewsFilmAPI,\n  getSearchFilmAPI,\n};\n"],"names":["List","styled","Item","ItemLink","Link","Description","Image","Title","ItemWrap","Date","Message","Form","Input","Button","FormWrap","Lupa","BsSearch","onSubmit","useSearchParams","searchParams","setSearchParams","searchQuery","get","useEffect","event","preventDefault","query","target","inputSearch","value","trim","toast","type","name","placeholder","defaultValue","autoFocus","style","width","height","useState","searchMovie","setSearchMovie","isLoading","setIsLoading","foundMovies","setFoundMovies","location","useLocation","getSearchFilm","getSearchFilmAPI","data","results","searchValue","Loader","length","map","title","poster_path","id","state","from","to","src","notFoundPoster","alt","BASE_URL","PARAMS","params","api_key","getTrendingFilmAPI","axios","response","getFilmDetailsAPI","movieId","getCreditsFilmAPI","getReviewsFilmAPI"],"sourceRoot":""}