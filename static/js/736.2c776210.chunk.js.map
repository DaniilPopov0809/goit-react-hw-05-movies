{"version":3,"file":"static/js/736.2c776210.chunk.js","mappings":"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","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","utils/API.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const List = styled.ul`\npadding: 10px 0;\ndisplay: flex;\nflex-wrap: wrap;\ngap: 20px;\ncolor: var(--secondary-text-color);\n\nborder-bottom: 1px solid var(--link-color);\n`;\n\nexport const Item = styled.li`\n @media screen and (min-width: 768px) {\n    flex-basis: calc((100% - 40px) / 3);\n  }\n  @media screen and (min-width: 1280px) {\n    flex-basis: calc((100% - 80px) / 5);\n  }\n`;\n\nexport const Image = styled.img`\nmargin-bottom: 5px`;","import { toast } from 'react-toastify';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getCreditsFilmAPI } from 'utils/API';\nimport {LoaderWrapper} from '../Layout/Layout.styled';  \nimport notFoundImg from '../../image/not_found_img.png';\nimport Loader from 'components/Loader/Loader';\nimport {List, Item, Image} from './Cast.styled';\n\nconst IMGPATH = 'https://image.tmdb.org/t/p/original';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n\n  const [cast, setCast] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    const getCast = async () => {\n      setIsLoading(true);\n      try {\n        const data = await getCreditsFilmAPI(movieId);\n        setCast(data.cast);\n      } catch {\n        toast.error('Oops, something went wrong!');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    getCast();\n  }, [movieId]);\n\n  return (\n    <>\n      {isLoading && <LoaderWrapper><Loader /></LoaderWrapper>}\n      {!isLoading && cast.length === 0 ? (\n        <p>We don't characters for this movie</p>\n      ) : (\n        <List>\n          {cast.map(({ name, profile_path, character, id }) => {\n            return (\n              <Item key={id}>\n                <Image\n                  src={\n                    profile_path\n                      ? `${IMGPATH}${profile_path}`\n                      : `${notFoundImg}`\n                  }\n                  alt={character}\n                />\n                <p>{name}</p>\n                <p>\n                  <span>Characters: </span>\n                  {character}\n                </p>\n              </Item>\n            );\n          })}\n        </List>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst PARAMS = {\n  params: {\n    api_key: '5928663a35cf4a3fefab8899a0242484',\n  },\n};\n\nasync function getTrendingFilmAPI() {\n  const response = await axios.get(`${BASE_URL}trending/movie/day`, PARAMS);\n  const data = response.data;\n  return data;\n}\n\nasync function getFilmDetailsAPI(movieId) {\n  const response = await axios.get(`${BASE_URL}movie/${movieId}`, PARAMS);\n  const data = response.data;\n  return data;\n}\n\nasync function getCreditsFilmAPI(movieId) {\n  const response = await axios.get(\n    `${BASE_URL}movie/${movieId}/credits`,\n    PARAMS\n  );\n  const data = response.data;\n  return data;\n}\n\nasync function getReviewsFilmAPI(movieId) {\n  const response = await axios.get(\n    `${BASE_URL}movie/${movieId}/reviews`,\n    PARAMS\n  );\n  const data = response.data;\n  return data;\n}\n\nasync function getSearchFilmAPI(searchMovie) {\n  const KEY = '5928663a35cf4a3fefab8899a0242484'\n  const response = await axios.get(\n    `${BASE_URL}search/movie?api_key=${KEY}&language=en-US&query=${searchMovie}&page=1&include_adult=false`);\n  const data = response.data;\n  return data;\n}\n\nexport {\n  getTrendingFilmAPI,\n  getCreditsFilmAPI,\n  getFilmDetailsAPI,\n  getReviewsFilmAPI,\n  getSearchFilmAPI,\n};\n"],"names":["List","styled","Item","Image","movieId","useParams","useState","cast","setCast","isLoading","setIsLoading","useEffect","getCast","getCreditsFilmAPI","data","toast","Loader","length","map","name","profile_path","character","id","src","notFoundImg","alt","BASE_URL","PARAMS","params","api_key","getTrendingFilmAPI","axios","response","getFilmDetailsAPI","getReviewsFilmAPI","getSearchFilmAPI","searchMovie"],"sourceRoot":""}